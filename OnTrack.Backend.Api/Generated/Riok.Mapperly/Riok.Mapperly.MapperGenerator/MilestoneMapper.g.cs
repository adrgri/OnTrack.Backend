// <auto-generated />
#nullable enable
namespace OnTrack.Backend.Api.Application.Mappings
{
    public sealed partial class MilestoneMapper
    {
        public override partial void ToExistingDomainModel(global::OnTrack.Backend.Api.Dto.MilestoneDto dto, global::OnTrack.Backend.Api.Models.Milestone entity)
        {
            if (dto.StatusId != null)
            {
                entity.Status = StatusMapper.FromId(dto.StatusId);
            }
            else
            {
                entity.Status = null;
            }
            if (dto.TaskIds != null)
            {
                entity.Tasks = MapToICollection(dto.TaskIds);
            }
            else
            {
                entity.Tasks = null;
            }
            entity.Project = ProjectMapper.FromId(dto.ProjectId);
            entity.Title = dto.Title;
            entity.Description = dto.Description;
        }

        public override partial void ToExistingDto(global::OnTrack.Backend.Api.Models.Milestone entity, global::OnTrack.Backend.Api.Dto.MilestoneDto dto)
        {
            if (entity.Status != null)
            {
                dto.StatusId = StatusMapper.ToId(entity.Status);
            }
            else
            {
                dto.StatusId = null;
            }
            if (entity.Tasks != null)
            {
                dto.TaskIds = MapToICollection1(entity.Tasks);
            }
            else
            {
                dto.TaskIds = null;
            }
            dto.ProjectId = ProjectMapper.ToId(entity.Project);
            dto.Title = entity.Title;
            dto.Description = entity.Description;
        }

        public override partial global::OnTrack.Backend.Api.Models.Milestone ToNewDomainModel(global::OnTrack.Backend.Api.Dto.MilestoneDto dto)
        {
            var target = new global::OnTrack.Backend.Api.Models.Milestone();
            if (dto.StatusId != null)
            {
                target.Status = StatusMapper.FromId(dto.StatusId);
            }
            else
            {
                target.Status = null;
            }
            if (dto.TaskIds != null)
            {
                target.Tasks = MapToICollection(dto.TaskIds);
            }
            else
            {
                target.Tasks = null;
            }
            target.Project = ProjectMapper.FromId(dto.ProjectId);
            target.Title = dto.Title;
            target.Description = dto.Description;
            return target;
        }

        public override partial global::OnTrack.Backend.Api.Dto.MilestoneDto ToNewDto(global::OnTrack.Backend.Api.Models.Milestone entity)
        {
            var target = new global::OnTrack.Backend.Api.Dto.MilestoneDto();
            if (entity.Status != null)
            {
                target.StatusId = StatusMapper.ToId(entity.Status);
            }
            else
            {
                target.StatusId = null;
            }
            if (entity.Tasks != null)
            {
                target.TaskIds = MapToICollection1(entity.Tasks);
            }
            else
            {
                target.TaskIds = null;
            }
            target.ProjectId = ProjectMapper.ToId(entity.Project);
            target.Title = entity.Title;
            target.Description = entity.Description;
            return target;
        }

        private global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.Task> MapToICollection(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.TaskId> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Task>(source.Count);
            foreach (var item in source)
            {
                target.Add(TaskMapper.FromId(item));
            }
            return target;
        }

        private global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.TaskId> MapToICollection1(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.Task> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.TaskId>(source.Count);
            foreach (var item in source)
            {
                target.Add(TaskMapper.ToId(item));
            }
            return target;
        }
    }
}