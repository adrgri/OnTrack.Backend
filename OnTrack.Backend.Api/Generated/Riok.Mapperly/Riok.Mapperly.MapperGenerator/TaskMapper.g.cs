// <auto-generated />
#nullable enable
namespace OnTrack.Backend.Api.Application.Mappings
{
    public sealed partial class TaskMapper
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        public override partial void ToExistingDomainModel(global::OnTrack.Backend.Api.Dto.TaskDto dto, global::OnTrack.Backend.Api.Models.Task entity)
        {
            if (dto.IconId != null)
            {
                entity.Icon = IconMapper.FromId(dto.IconId);
            }
            else
            {
                entity.Icon = null;
            }
            if (dto.AssignedResourceIds != null)
            {
                entity.AssignedResources = MapToList(dto.AssignedResourceIds);
            }
            else
            {
                entity.AssignedResources = null;
            }
            if (dto.AttachmentIds != null)
            {
                entity.Attachments = MapToList1(dto.AttachmentIds);
            }
            else
            {
                entity.Attachments = null;
            }
            if (dto.SubtaskIds != null)
            {
                entity.Subtasks = MapToList2(dto.SubtaskIds);
            }
            else
            {
                entity.Subtasks = null;
            }
            entity.Project = ProjectMapper.FromId(dto.ProjectId);
            entity.Title = dto.Title;
            entity.Description = dto.Description;
            entity.StartDate = dto.StartDate;
            entity.DueDate = dto.DueDate;
            entity.IsCompleted = dto.IsCompleted;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        public override partial void ToExistingDto(global::OnTrack.Backend.Api.Models.Task entity, global::OnTrack.Backend.Api.Dto.TaskDto dto)
        {
            if (entity.Icon != null)
            {
                dto.IconId = IconMapper.ToId(entity.Icon);
            }
            else
            {
                dto.IconId = null;
            }
            if (entity.AssignedResources != null)
            {
                dto.AssignedResourceIds = MapToList3(entity.AssignedResources);
            }
            else
            {
                dto.AssignedResourceIds = null;
            }
            if (entity.Attachments != null)
            {
                dto.AttachmentIds = MapToList4(entity.Attachments);
            }
            else
            {
                dto.AttachmentIds = null;
            }
            if (entity.Subtasks != null)
            {
                dto.SubtaskIds = MapToList5(entity.Subtasks);
            }
            else
            {
                dto.SubtaskIds = null;
            }
            dto.ProjectId = ProjectMapper.ToId(entity.Project);
            dto.Title = entity.Title;
            dto.Description = entity.Description;
            dto.StartDate = entity.StartDate;
            dto.DueDate = entity.DueDate;
            dto.IsCompleted = entity.IsCompleted;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        public override partial global::OnTrack.Backend.Api.Models.Task ToNewDomainModel(global::OnTrack.Backend.Api.Dto.TaskDto dto)
        {
            var target = new global::OnTrack.Backend.Api.Models.Task();
            if (dto.IconId != null)
            {
                target.Icon = IconMapper.FromId(dto.IconId);
            }
            else
            {
                target.Icon = null;
            }
            if (dto.AssignedResourceIds != null)
            {
                target.AssignedResources = MapToList(dto.AssignedResourceIds);
            }
            else
            {
                target.AssignedResources = null;
            }
            if (dto.AttachmentIds != null)
            {
                target.Attachments = MapToList1(dto.AttachmentIds);
            }
            else
            {
                target.Attachments = null;
            }
            if (dto.SubtaskIds != null)
            {
                target.Subtasks = MapToList2(dto.SubtaskIds);
            }
            else
            {
                target.Subtasks = null;
            }
            target.Project = ProjectMapper.FromId(dto.ProjectId);
            target.Title = dto.Title;
            target.Description = dto.Description;
            target.StartDate = dto.StartDate;
            target.DueDate = dto.DueDate;
            target.IsCompleted = dto.IsCompleted;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        public override partial global::OnTrack.Backend.Api.Dto.TaskDto ToNewDto(global::OnTrack.Backend.Api.Models.Task entity)
        {
            var target = new global::OnTrack.Backend.Api.Dto.TaskDto();
            if (entity.Icon != null)
            {
                target.IconId = IconMapper.ToId(entity.Icon);
            }
            else
            {
                target.IconId = null;
            }
            if (entity.AssignedResources != null)
            {
                target.AssignedResourceIds = MapToList3(entity.AssignedResources);
            }
            else
            {
                target.AssignedResourceIds = null;
            }
            if (entity.Attachments != null)
            {
                target.AttachmentIds = MapToList4(entity.Attachments);
            }
            else
            {
                target.AttachmentIds = null;
            }
            if (entity.Subtasks != null)
            {
                target.SubtaskIds = MapToList5(entity.Subtasks);
            }
            else
            {
                target.SubtaskIds = null;
            }
            target.ProjectId = ProjectMapper.ToId(entity.Project);
            target.Title = entity.Title;
            target.Description = entity.Description;
            target.StartDate = entity.StartDate;
            target.DueDate = entity.DueDate;
            target.IsCompleted = entity.IsCompleted;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Resource> MapToList(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.ResourceId> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Resource>(source.Count);
            foreach (var item in source)
            {
                target.Add(ResourceMapper.FromId(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Attachment> MapToList1(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.AttachmentId> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Attachment>(source.Count);
            foreach (var item in source)
            {
                target.Add(AttachmentMapper.FromId(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Task> MapToList2(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.TaskId> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.Task>(source.Count);
            foreach (var item in source)
            {
                target.Add(((global::OnTrack.Backend.Api.Application.Mappings.IMapper<global::OnTrack.Backend.Api.Models.TaskId, global::OnTrack.Backend.Api.Models.Task, global::OnTrack.Backend.Api.Dto.TaskDto>)this).FromId(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.ResourceId> MapToList3(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.Resource> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.ResourceId>(source.Count);
            foreach (var item in source)
            {
                target.Add(ResourceMapper.ToId(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.AttachmentId> MapToList4(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.Attachment> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.AttachmentId>(source.Count);
            foreach (var item in source)
            {
                target.Add(AttachmentMapper.ToId(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.4.0.0")]
        private global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.TaskId> MapToList5(global::System.Collections.Generic.ICollection<global::OnTrack.Backend.Api.Models.Task> source)
        {
            var target = new global::System.Collections.Generic.List<global::OnTrack.Backend.Api.Models.TaskId>(source.Count);
            foreach (var item in source)
            {
                target.Add(((global::OnTrack.Backend.Api.Application.Mappings.IMapper<global::OnTrack.Backend.Api.Models.TaskId, global::OnTrack.Backend.Api.Models.Task, global::OnTrack.Backend.Api.Dto.TaskDto>)this).ToId(item));
            }
            return target;
        }
    }
}